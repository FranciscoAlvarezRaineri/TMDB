const db = require("../db");
const S = require("sequelize");
const bcrypt = require("bcrypt");

class User extends S.Model {}

User.init(
  {
    name: {
      type: S.STRING,
      allowNull: false,
    },
    password: {
      type: S.STRING,
      allowNull: false,
    },
    salt: {
      type: S.STRING,
    },
    favourites: {
      type: S.ARRAY(S.STRING),
      defaultValue: [],
    },
  },
  {
    hooks: {
      beforeCreate: (user) => {
        const salt = bcrypt.genSaltSync(8);
        user.salt = salt;
        return user.hash(user.password, user.salt).then((hash) => {
          user.password = hash;
        });
      },
    },
    sequelize: db,
    modelName: "user",
  }
);

User.prototype.hash = function (password, salt) {
  return bcrypt.hash(password, salt);
};

User.prototype.validatePassword = function (password) {
  return bcrypt
    .hash(password, this.salt)
    .then((hash) => hash === this.password);
};

User.prototype.addFavourite = function (movieId) {
  return this.favourites.includes(movieId)
    ? this
    : this.set({
        favourites: [...this.favourites, movieId],
      }).save();
};

User.prototype.removeFavourite = function (movieId) {
  if (this.favourites.includes(movieId))
    this.set({
      favourites: S.fn("array_remove", S.col("favourites"), movieId),
    });
  return this.save();
};

User.findByName = function (name) {
  return User.findOne({ where: { name } });
};

module.exports = User;
